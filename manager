#!/bin/env python2

"""
Module Manager

Start or stop a module.

Usage:
  module start <module_name> [--daemon]
  module stop <module_name>
  module start-all
  module stop-all
  module status
  module (-h | --help)

Options:
  -h --help     Show this screen.
  --daemon      Start the module as a new daemon.
  --porcelain   Give the output in an easy-to-parse format for script. R, S
                mean respectively that the module is running, stopped.

Output:
  When the manager is used with the *status* command, the list of the status of
  the modules is written into stdin. The format of output is : PREFIXE
  MODULE_NAME where PREFIXE is one of those described below and MODULE_NAME is
  the name of the directory of the module (it may be different of the public
  name and the id of the module).

  R - the module is running
  S - the module is stopped
"""

import os
import sys
_file = os.path.realpath(__file__)
_root = os.path.dirname(_file)
sys.path.append(os.path.join(_root, 'core/'))
import module
import module.instance as instance

if __name__ == '__main__':
    from docopt import docopt
    args = docopt(__doc__)

    if args['start']:
        instance.execm(args['<module_name>'], args['--daemon'])
    elif args['stop']:
        instance.stop(args['<module_name>'])
    elif args['start-all']:
        re = instance.invoke_all()
        print '\n'.join(map(str, re))
    elif args['stop-all']:
        instance.stop_all()
    elif args['status']:
        status = instance.status_all()
        prefixe = {True: 'R', False: 'S'}
        for name, state in status.iteritems():
            print '%s %s' % (prefixe[state], name)
